# Manthan â€” Frontend (auto-detect Dockerfile)
# Builds Next.js image, pushes to Artifact Registry, deploys to Cloud Run.

substitutions:
  _REGION: asia-south1
  _PROJECT: project-manthan-468609
  _REPO: manthan
  _SERVICE: manthan-frontend

  # Frontend runtime env (exposed by /api/runtime-env)
  _BACKEND_BASE_URL: ""          # e.g. https://manthan-backend-xxxx-asia-south1.run.app
  _FIREBASE_API_KEY: ""
  _FIREBASE_AUTH_DOMAIN: ""
  _FIREBASE_PROJECT_ID: ""
  _FIREBASE_APP_ID: ""
  _FIREBASE_STORAGE_BUCKET: ""
  _FIREBASE_MESSAGING_SENDER_ID: ""
  _POSTHOG_KEY: ""

# One of these must exist in your repo:
#   Dockerfile.frontend
#   apps/web/Dockerfile.frontend
#   apps/web/Dockerfile
#   Dockerfile
steps:
  # Detect Dockerfile path for frontend and store to a file
  - name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        DF=""
        for CAND in \
          "Dockerfile.frontend" \
          "apps/web/Dockerfile.frontend" \
          "apps/web/Dockerfile" \
          "Dockerfile"
        do
          if [[ -f "$CAND" ]]; then DF="$CAND"; break; fi
        done
        if [[ -z "$DF" ]]; then
          echo "ERROR: No frontend Dockerfile found. Expected one of: Dockerfile.frontend, apps/web/Dockerfile.frontend, apps/web/Dockerfile, Dockerfile"
          exit 1
        fi
        echo "Using frontend Dockerfile: $DF"
        echo -n "$DF" > .df_frontend
        echo "IMAGE=${_REGION}-docker.pkg.dev/${_PROJECT}/${_REPO}/${_SERVICE}:${COMMIT_SHA}"

  # Build
  - name: gcr.io/cloud-builders/docker
    entrypoint: bash
    args:
      - -lc
      - |
        DF="$(cat .df_frontend)"
        docker build \
          -t "${_REGION}-docker.pkg.dev/${_PROJECT}/${_REPO}/${_SERVICE}:${COMMIT_SHA}" \
          -f "$DF" .

  # Push
  - name: gcr.io/cloud-builders/docker
    args:
      - push
      - ${_REGION}-docker.pkg.dev/${_PROJECT}/${_REPO}/${_SERVICE}:${COMMIT_SHA}

  # Deploy to Cloud Run (always pass env)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: gcloud
    args:
      [
        "run","deploy","${_SERVICE}",
        "--image","${_REGION}-docker.pkg.dev/${_PROJECT}/${_REPO}/${_SERVICE}:${COMMIT_SHA}",
        "--region","${_REGION}",
        "--platform","managed",
        "--allow-unauthenticated",
        "--memory","1Gi",
        "--cpu","1",
        "--timeout","300",
        "--set-env-vars",
        "BACKEND_BASE_URL=${_BACKEND_BASE_URL},FIREBASE_API_KEY=${_FIREBASE_API_KEY},FIREBASE_AUTH_DOMAIN=${_FIREBASE_AUTH_DOMAIN},FIREBASE_PROJECT_ID=${_FIREBASE_PROJECT_ID},FIREBASE_APP_ID=${_FIREBASE_APP_ID},FIREBASE_STORAGE_BUCKET=${_FIREBASE_STORAGE_BUCKET},FIREBASE_MESSAGING_SENDER_ID=${_FIREBASE_MESSAGING_SENDER_ID},POSTHOG_KEY=${_POSTHOG_KEY}"
      ]

images:
  - ${_REGION}-docker.pkg.dev/${_PROJECT}/${_REPO}/${_SERVICE}:${COMMIT_SHA}

options:
  logging: CLOUD_LOGGING_ONLY

timeout: "1200s"

