# Manthan â€” Backend (auto-detect Dockerfile)
# Builds FastAPI image, pushes to Artifact Registry, deploys to Cloud Run.

substitutions:
  _REGION: asia-south1
  _PROJECT: project-manthan-468609
  _REPO: manthan
  _SERVICE: manthan-backend

  # Backend runtime env (can override in Trigger UI)
  _ALLOWED_ORIGIN: ""            # e.g. https://manthan-frontend-xxxx-asia-south1.run.app
  _MODEL_NAME: gpt-5
  _GCS_BUCKET: manthan-assets
  _FIRESTORE_NAMESPACE: prod
  _ENABLE_IMAGE_GEN: "false"

# One of these must exist in your repo:
#   Dockerfile.backend
#   apps/api/Dockerfile.backend
#   apps/api/Dockerfile
#   Dockerfile
steps:
  # Detect Dockerfile path for backend and store to a file
  - name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        DF=""
        for CAND in \
          "Dockerfile.backend" \
          "apps/api/Dockerfile.backend" \
          "apps/api/Dockerfile" \
          "Dockerfile"
        do
          if [[ -f "$CAND" ]]; then DF="$CAND"; break; fi
        done
        if [[ -z "$DF" ]]; then
          echo "ERROR: No backend Dockerfile found. Expected one of: Dockerfile.backend, apps/api/Dockerfile.backend, apps/api/Dockerfile, Dockerfile"
          exit 1
        fi
        echo "Using backend Dockerfile: $DF"
        echo -n "$DF" > .df_backend
        echo "IMAGE=${_REGION}-docker.pkg.dev/${_PROJECT}/${_REPO}/${_SERVICE}:${COMMIT_SHA}"

  # Build
  - name: gcr.io/cloud-builders/docker
    entrypoint: bash
    args:
      - -lc
      - |
        DF="$(cat .df_backend)"
        docker build \
          -t "${_REGION}-docker.pkg.dev/${_PROJECT}/${_REPO}/${_SERVICE}:${COMMIT_SHA}" \
          -f "$DF" .

  # Push
  - name: gcr.io/cloud-builders/docker
    args:
      - push
      - ${_REGION}-docker.pkg.dev/${_PROJECT}/${_REPO}/${_SERVICE}:${COMMIT_SHA}

  # Deploy to Cloud Run (always pass env + secret)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: gcloud
    args:
      [
        "run","deploy","${_SERVICE}",
        "--image","${_REGION}-docker.pkg.dev/${_PROJECT}/${_REPO}/${_SERVICE}:${COMMIT_SHA}",
        "--region","${_REGION}",
        "--platform","managed",
        "--allow-unauthenticated",
        "--memory","1Gi",
        "--cpu","1",
        "--timeout","300",
        "--set-env-vars",
        "ALLOWED_ORIGIN=${_ALLOWED_ORIGIN},MODEL_NAME=${_MODEL_NAME},GCP_PROJECT_ID=${_PROJECT},GCS_BUCKET=${_GCS_BUCKET},FIRESTORE_NAMESPACE=${_FIRESTORE_NAMESPACE},ENABLE_IMAGE_GEN=${_ENABLE_IMAGE_GEN}",
        "--update-secrets","OPENAI_API_KEY=OPENAI_API_KEY:latest"
      ]

images:
  - ${_REGION}-docker.pkg.dev/${_PROJECT}/${_REPO}/${_SERVICE}:${COMMIT_SHA}

options:
  logging: CLOUD_LOGGING_ONLY

timeout: "1200s"

